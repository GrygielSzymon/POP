Dokument wymagań projektowych
System zarządzania produktami (ASP .NET core MVC)
=======================================================
    1. Wprowadzenie
       1.1   Nazwa projetu: System zarządzania produktam
	1.2   Cel projektu:
		Stworzenie nowoczsnej, wielofunkcyjnej aplkacji webowej do zarządzania produktami z 		zaawansowanymi funkcjami, takimi jak logowanie użytkowników, recenzje produktów, 			dynamiczne 	raporty i filtrowanie. System będzie obsługwał role użytkowników oraz 			administratrów.
	1.3   Zakres projektu:
		Aplikacja oparta na ASP .NET Core MVC z C# jako języem backendowym i bazą danych SQL 		Server. 	System ma dzałać w oparciu o nowoczesne standardy, z optymalizacją wydajnośc i 		integracją z 	zewnętrznymi API oraz mogułami.
=======================================================
    2. Główne wymagania funkcjonalne
	2.1   Moduł zarządzania użytkownikam
	2.2   Zarządzanie produktami
	2.3   Moduł recenzji i ocen
	2.4   Dashboard administracyjny
	2.5   Integracjie zewnętrzne
	2.6   Optymalzacja wydajności
=======================================================
    3. Wymagania niefunkcjonalne
	3.1   Wydajność
    • Aplikacja powia obsługwać do 1000 aktywnych użytkowników jednocześnie
    • strona produktu pownna ładować się w czasie krótszym niż 3 sekundy
3.2   Bezpieczenstwo
    • System mus zapewnić hashowanie haseł użytkownikó przy użyciu bezpiecznych algorytmów kryptograficznych, takich jak bcrypt, Argon2 lub PBKDF2, z wykożystaniem inikalnej soli dla każdego użytkownka
    • Dane komunikowane między serwerem a klientem powinny być zabezpieczone protokołem HTTPS
	3.3   Skalowalnośc
    • Aplikacja powinna być zaprojektowana zgodnie z zaasadą modularności i luźnego powiązania komponentów, aby umozlwić łatwe dodawanie nowych funkcjonalności bez konieczności ingerencji w istnejący kod
    • Powijnna wykożystywac zasady SOLID, wzorzec projektowy CQRS w warstwie logiki bznesowej, natomast MVC jako warstwę prezentacji
    • Warto zastosować Dependency Injecton (DI), aby umozliwć łatwą wymianę omponentów oraz testowalność
    • Aplikacja powinna być projekowana jako cloude-ready, co oznacza:
        ◦ Wykożystanie kontenerezacji(np. Docker) i orkestracji (np. Kbernets)
        ◦ Możliwość wdrożenia jako serverless (np. AWS Lambda) lub w module PaaS (np.Azure App Servce)
        ◦ Obsługa rozproszonych baz danych (np. Azure SQL, AWS RDS) z możliwością replikacj i automatycznego skalowania
        ◦ Integrację z usługami chmurowymi, takii jak monitoring (Azure Monitror), logowanie (ELK Stack) oraz CI/CD (GitHub actions, Azure DevOps)
	3.4   Użytecznośc
    • Interfejs aplikacj musi być intuicyjny i przystosowany do urządzeń moblnych (responsive design)
	3.5   Kompatybilność
    • przeglądarki: Chrome, Firefox, Edge
    • System operacyjny serwera: Windows Serwer 2022
=======================================================
    4. Technologia i narzędzia
       4.1   Technologia backend
            ▪ ASP .NET Core(Model-View-Controler)
            ▪ C# .NET 9
            ▪ Entity framework Core 9.0
       4.2   technologie frontend
            ▪ HTML5, CSS3
            ▪ Bootstrap do responsywnego designu
            ▪ Chart.js lub Google Chats do wizualizacji danych
       4.3   bazy danych
            ▪ MS SQL Server 2022 (z pełnotekstowym wyszuiwaniem)
       4.4   Narzędzia wdrożeniowe
            ▪ MS Visual Studio 2022
            ▪ Gt do kątrol wersji
            ▪ Redis do cache’owania
            ▪ Azure Blob Storage lub system plików do przechowywania zdjęć
=======================================================
    5. Harmonogram projektu
Etap	Czas Trwania	Opis
Analiza wymagań	1 tydzień	Zbieranie wymagań i przygotowanie specyfikacj
Projetowanie UI/UX	1 tydzień	Tworzenie maket i interfejsu
Implementacja backend	4 tygodnie	Tworzenie logki aplikacji oraz bazy danych
Implementacja frontend	3 tygodnie	Dodanie interfejsu i funkcji JS
Testowanie	2 tygodnie	Testowanie jednostkowe i integracyjne
Wdrożenie i dokumentacja	1 tydzień	Przekazanie projektu z dokumentacją

Całkowity czas trwania: 12 tygodni.
=======================================================
    6. Kryteria aceptacji
        ◦ Wyszystkie Funkcjonalności dzałają zgodnie z wymaganiam
        ◦ Aplikacja spełnia wymagania wydajnościowe i bezpieczeństwa
        ◦ Testy jednostkowe i integracyjne zkończone sukcesem
        ◦ Kod jest zgodny ze standardami programistycznymi, dobrze strukturyzowany  odpowiedno udokumentowany
    7. Wnoski końcowe
Ten doument przedstawia pełny zestaw wymagań funkcjonalnych i niefunkcjonalnych dla systemu zzarządzania produktami. Firma zlecająca oczekuje aplikacji stabilnej, wydajnej i intuicyjnej, spełniającej wszystke wymienione krytera.
